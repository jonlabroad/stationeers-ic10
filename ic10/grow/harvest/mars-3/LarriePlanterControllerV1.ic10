alias Larre d0
alias SeedChute d1
alias LockMem d2

define ENABLE 1
define DISABLE 0
define LARRE_IDLE 1
define HydroHash HASH("StructureHydroponicsTrayData")
define SEED_STATION 1
define DEPOSIT_STATION 11
define HOME_STATION 0
define FIRST_STATION 2
define LAST_STATION 10
define STATION_INC 1
define LARRE_HYDRO_SLOT 255
define LOCK_ID 2
# States
define STATE_IDLE 0
define SEED_FETCH 1
define SEARCH_CHECK 3
define STATE_PLANT 4
define STATE_DEPOSIT 6
alias currState r0
move currState STATE_IDLE
main:
l r14 LockMem Setting
beqz r14 unlocked
beq r14 LOCK_ID unlocked
j end
unlocked:

s db Setting currState
alias larreIdle r2
l larreIdle Larre Idle
alias larreSetting r4
l larreSetting Larre Setting
alias currStation r3
alias lockAcquired r13
beq currState STATE_IDLE idleState
beq currState SEED_FETCH seedFetch
beq currState SEARCH_CHECK searchCheck
beq currState STATE_PLANT plant
beq currState STATE_DEPOSIT deposit
j end # Shouldn't get here

idleState:
alias occupiedStatus r1
lbs occupiedStatus HydroHash 0 Occupied Minimum
bgtz occupiedStatus nothingToDo
jal tryGetLock
beqz lockAcquired end # Check if We got the lock
move currState SEED_FETCH
j end
nothingToDo:
move currStation HOME_STATION
s Larre Setting currStation
jal waitUntilIdle
s LockMem Setting 0
j end

seedFetch:
s Larre Setting SEED_STATION
jal waitUntilIdle
s Larre Activate ENABLE
jal waitUntilIdle
move currStation FIRST_STATION
move currState SEARCH_CHECK
j end

# Note: Currently assumes that something WILL be planted (unoccupied hydro exists)
searchCheck:
s Larre Setting currStation # Move to station
jal waitUntilIdle
ls occupiedStatus Larre LARRE_HYDRO_SLOT Occupied # Check for occupied
beqz occupiedStatus plant # plant?
add currStation STATION_INC currStation # NO, get next station
j searchCheck # move on to next station
plant:
s Larre Activate ENABLE
jal waitUntilIdle
move currState STATE_DEPOSIT
j end

deposit:
s Larre Setting DEPOSIT_STATION
jal waitUntilIdle
alias clawOccupied r6
ls clawOccupied Larre 0 Occupied
beqz clawOccupied depositDone
s Larre Activate ENABLE
jal waitUntilIdle
depositDone:
move currState STATE_IDLE
j end

end:
yield
j main

waitUntilIdle:
yield
l larreIdle Larre Idle
beq larreIdle LARRE_IDLE ra
j waitUntilIdle

tryGetLock:
l r14 LockMem Setting
beqz r14 isUnlocked # Check if lock not 0
beq r14 LOCK_ID alreadyHaveLock
move lockAcquired 0 # Else, no lock acquired
j ra
isUnlocked:
s LockMem Setting LOCK_ID
alreadyHaveLock:
move lockAcquired 1
j ra
